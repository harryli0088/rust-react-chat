{"version":3,"sources":["Components/Chat/Chat.tsx","github.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Chat","showSenderAddr","props","displaySenderAddr","senderAddr","className","this","content","type","React","Component","App","lastDate","Date","lastSenderAddr","lastType","socket","setUpSocket","console","log","WebSocket","process","window","location","pathname","replace","onopen","addChat","setState","socketReadyState","readyState","onmessage","message","parsed","JSON","parse","data","addChatFromSocket","sender_addr","type_key","err","error","onclose","date","chat","chats","state","concat","getConnectionStatus","onChatTypeSubmit","e","preventDefault","input","trim","send","onNewRoomSubmit","newRoomURI","encodeURIComponent","newRoom","href","origin","close","connectionStatus","id","map","m","i","onSubmit","autoFocus","onChange","target","value","disabled","rel","src","github","alt","htmlFor","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.139b3f28.chunk.js","sourcesContent":["import React from 'react';\nimport \"./chat.scss\"\n\nexport type ChatType = {\n  content: React.ReactNode,\n  date: Date,\n  senderAddr: string,\n  showSenderAddr: boolean,\n  type: string,\n}\n\ninterface State {}\n\nclass Chat extends React.Component<ChatType,State> {\n\n  showSenderAddr = () => {\n    if(this.props.showSenderAddr) {\n      const displaySenderAddr = this.props.senderAddr===\"self\" ? \"You\" : this.props.senderAddr\n\n      return (\n        <div className=\"sender\">{displaySenderAddr}</div>\n      )\n    }\n  }\n\n  render() {\n    if(this.props.content) {\n      return (\n        <div className=\"message-container\">\n          <div className={`message ${this.props.senderAddr} ${this.props.type}`}>\n            <div>\n              {this.showSenderAddr()}\n              <span className=\"content\">\n                {\n                  typeof this.props.content === \"string\"\n                  ? <pre>{this.props.content}</pre>\n                  : this.props.content\n                }\n              </span>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return null;\n  }\n}\n\nexport default Chat;\n","export default __webpack_public_path__ + \"static/media/github.7ef381bc.svg\";","import React from 'react'\nimport Chat, { ChatType } from \"Components/Chat/Chat\"\nimport github from \"github.svg\"\nimport 'App.scss'\n\n\ninterface State {\n  input: string,\n  chats: ChatType[],\n  newRoom: string,\n  socketReadyState: number,\n}\n\nconst WS_SERVER_URL = process.env.REACT_APP_WS_SERVER_URL || \"ws://localhost:8080\"\n\nclass App extends React.Component<{},State> {\n  lastDate: Date = new Date()\n  lastSenderAddr: string = \"\"\n  lastType: string = \"\"\n  socket: WebSocket\n\n  constructor(props:{}) {\n    super(props)\n\n    this.state = {\n      input: \"\",\n      chats: [\n        // {\n        //   content: \"testing testing 123\",\n        //   date: new Date(),\n        //   senderAddr: \"tessdadfadfadfasfsdsdasfafdfafdfasfadt\",\n        //   showSenderAddr: true,\n        //   type: \"user\",\n        // },\n        // {\n        //   content: \"testing testing 123\",\n        //   date: new Date(),\n        //   senderAddr: \"self\",\n        //   showSenderAddr: true,\n        //   type: \"user\",\n        // },\n        // {\n        //   content: \"testing testing 123\",\n        //   date: new Date(),\n        //   senderAddr: \"self\",\n        //   showSenderAddr: false,\n        //   type: \"user\",\n        // },\n        // {\n        //   content: \"testing testing 123\",\n        //   date: new Date(),\n        //   senderAddr: \"self\",\n        //   showSenderAddr: false,\n        //   type: \"user\",\n        // },\n      ],\n      newRoom: \"\",\n      socketReadyState: -1,\n    }\n\n    this.socket = this.setUpSocket()\n  }\n\n  componentWillUnmount() {\n    this.socket.close()\n  }\n\n  setUpSocket = () => {\n    console.log(\"I RUN\")\n    const socket = new WebSocket(WS_SERVER_URL, window.location.pathname.replace(/\\//ig, \"-\"))\n    socket.onopen = () => {\n      console.log(\"OPEN RUNS\")\n      this.addChat(<span>You have joined the chat room <span className=\"blob\">{window.location.pathname}</span></span>, \"self\", \"meta\")\n      this.setState({socketReadyState: socket.readyState})\n    }\n\n    socket.onmessage = (message:MessageEvent<any>) => {\n      console.log(\"MESSAGE\", message)\n\n      try {\n        const parsed = JSON.parse(message.data)\n        this.addChatFromSocket(parsed.message, parsed.sender_addr, parsed.type_key)\n      }\n      catch(err) {\n        console.error(err)\n      }\n\n    }\n\n    socket.onclose = () => {\n      console.log(\"CLOSE\")\n      this.setState({socketReadyState: socket.readyState})\n    }\n\n    return socket\n  }\n\n  addChatFromSocket = (content: string, senderAddr:string, type: string) => {\n    this.addChat(content, senderAddr, type) //add the chat to state\n\n    this.setState({ //update the socket state\n      socketReadyState: this.socket.readyState,\n    })\n  }\n\n  addChat = (content: React.ReactNode, senderAddr:string, type: string) => {\n    const date = new Date()\n    const chat:ChatType = {\n      content,\n      date,\n      senderAddr,\n      showSenderAddr: this.lastSenderAddr !== senderAddr\n      || this.lastType !== type, //set whether we should show the sender addr\n      type,\n    }\n\n    //record last values\n    this.lastDate = date\n    this.lastSenderAddr = chat.senderAddr\n    this.lastType = chat.type\n\n    this.setState({ //add the chat to state\n      chats: this.state.chats.concat(chat),\n    })\n  }\n\n  getConnectionStatus = () => {\n    switch(this.state.socketReadyState) {\n      case 0:\n        return \"Connecting\"\n      case 1:\n        return \"Connected\"\n      case 2:\n        return \"Closing\"\n      default:\n        return \"Closed\"\n    }\n  }\n\n  onChatTypeSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    const content = this.state.input.trim() //trim the input of any white space\n\n    if(content) {\n      this.socket.send(content) //send the chat to the socket\n\n      this.addChat(content, \"self\", \"user\") //add this chat to state\n\n      this.setState({ input: \"\" }) //clear the input\n    }\n  }\n\n  onNewRoomSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    const newRoomURI = encodeURIComponent(this.state.newRoom)\n\n    window.location.href = `${window.location.origin}/${newRoomURI}`;\n  }\n\n  render() {\n    const connectionStatus = this.getConnectionStatus()\n\n    return (\n      <div id=\"App\">\n        <div id=\"content\">\n          <div id=\"header\" className=\"container\">\n            Current Room: <span  className=\"blob\">{window.location.pathname}</span> <span className={`blob  ${connectionStatus}`}>{connectionStatus}</span>\n          </div>\n\n          <div id=\"chat-container\" className=\"container\">\n            {this.state.chats.map((m,i) =>\n              <Chat key={i} {...m}/>\n            )}\n          </div>\n\n          <div id=\"chat-form-container\">\n            <form id=\"chat-form\" onSubmit={this.onChatTypeSubmit}>\n              <input\n                autoFocus\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({input: e.target.value})}\n                value={this.state.input}\n              />\n\n              <button type=\"submit\" disabled={this.state.socketReadyState !== 1}>Send</button>\n            </form>\n          </div>\n        </div>\n\n        <div id=\"sidebar\">\n          <a id=\"github\" href=\"https://github.com/harryli0088/rust-react-chat\" target=\"_blank\" rel=\"noopener noreferrer\"><img src={github} alt=\"github repo\"/></a>\n\n          <h2>React - Rust Chat App</h2>\n          <div>I created this chat room prototype to learn how to use Rust. The Rust server features include:</div>\n          <ul>\n            <li>WebSocket server</li>\n            <li>Chat rooms distinguished by route (via WebSocket protocol)</li>\n            <li>Alerts when a client connects or disconnects</li>\n          </ul>\n\n          <hr/>\n\n          <form id=\"new-room-form\" onSubmit={this.onNewRoomSubmit}>\n            <br/>\n            <label htmlFor=\"new-room-input\">Change Rooms:</label>\n            <div>\n              <input\n                id=\"new-room-input\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({newRoom: e.target.value})}\n                placeholder=\"Enter a new room code\"\n                value={this.state.newRoom}\n              />&nbsp;\n\n              <button type=\"submit\">Change</button>\n            </div>\n            <br/>\n          </form>\n\n          <hr/>\n\n          <div>\n\t\t          <p>Built using <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a>, <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Typescript</a>, <a href=\"https://fontawesome.com/license\" target=\"_blank\" rel=\"noopener noreferrer\">Font Awesome</a>, and <a href=\"https://www.rust-lang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Rust</a></p>\n\t\t            <p><a href=\"https://github.com/harryli0088/rust-react-chat\" target=\"_blank\" rel=\"noopener noreferrer\">Github Repo</a></p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.scss';\nimport App from 'App';\nimport reportWebVitals from 'reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}